{"ast":null,"code":"var _jsxFileName = \"/Users/xinyue/Desktop/wbdv-s21-xinyue-dang-client-react/src/components/widgets/widget-list.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport widgetService from '../../services/widget-service';\nimport HeadingWidget from './heading-widget';\nimport ParagraphWidget from './paragraph-widget';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WidgetList = ({\n  deleteWidget,\n  updateWidget,\n  createWidget,\n  findWidgetsForTopic,\n  widgets = [],\n  clearWidget\n}) => {\n  _s();\n\n  const {\n    topicId\n  } = useParams();\n  const [editingWidget, setEditingWidget] = useState({});\n  useEffect(() => {\n    if (topicId !== 'undefined' && typeof topicId !== 'undefined') {\n      findWidgetsForTopic(topicId);\n    } else {\n      clearWidget();\n    }\n  }, [topicId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"i\", {\n      onClick: () => {\n        createWidget(topicId);\n      },\n      className: \"fas fa-plus float-right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Widget List \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), JSON.stringify(widgets), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group\",\n      children: widgets.map(widget => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item\",\n        children: [editingWidget.id !== widget.id && /*#__PURE__*/_jsxDEV(\"i\", {\n          onClick: () => setEditingWidget(widget),\n          className: \"fas fa-cog float-right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 29\n        }, this), widget.type === 'HEADING' && /*#__PURE__*/_jsxDEV(HeadingWidget, {\n          editing: editingWidget.id === widget.id,\n          widget: widget,\n          updateWidget: updateWidget,\n          deleteWidget: deleteWidget\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 29\n        }, this), widget.type === 'PARAGRAPH' && /*#__PURE__*/_jsxDEV(ParagraphWidget, {\n          editing: editingWidget.id === widget.id,\n          widget: widget,\n          updateWidget: updateWidget,\n          deleteWidget: deleteWidget\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 29\n        }, this)]\n      }, widget.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WidgetList, \"nUGjst1/dSvS2sMXAVCpuYMHK2k=\", false, function () {\n  return [useParams];\n});\n\n_c = WidgetList;\n\nconst stpm = state => {\n  return {\n    widgets: state.widgetReducer.widgets\n  };\n};\n\nconst dtpm = dispatch => {\n  return {\n    createWidget: topicId => {\n      widgetService.createWidget(topicId, {\n        type: \"HEADING\",\n        size: 1,\n        text: \"New Widget\"\n      }).then(theActualWidget => dispatch({\n        type: 'CREATE_WIDGET',\n        widget: theActualWidget\n      }));\n    },\n    deleteWidget: item => {\n      console.log(item.id);\n      widgetService.deleteWidget(item.id).then(status => dispatch({\n        type: 'DELETE_WIDGET',\n        widgetToDelete: item\n      }));\n    },\n    updateWidget: widget => widgetService.updateWidget(widget.id, widget).then(status => dispatch({\n      type: 'UPDATE_WIDGET',\n      widgetToUpdate: widget\n    })),\n    findWidgetsForTopic: topicId => widgetService.findWidgetsForTopic(topicId).then(theWidgets => dispatch({\n      type: 'FIND_ALL_WIDGETS_FOR_TOPIC',\n      widgets: theWidgets\n    })),\n    clearWidget: () => dispatch({\n      type: 'CLEAR_WIDGET',\n      widgets: []\n    })\n  };\n};\n\nexport default connect(stpm, dtpm)(WidgetList);\n\nvar _c;\n\n$RefreshReg$(_c, \"WidgetList\");","map":{"version":3,"sources":["/Users/xinyue/Desktop/wbdv-s21-xinyue-dang-client-react/src/components/widgets/widget-list.js"],"names":["React","useEffect","useState","connect","useParams","widgetService","HeadingWidget","ParagraphWidget","WidgetList","deleteWidget","updateWidget","createWidget","findWidgetsForTopic","widgets","clearWidget","topicId","editingWidget","setEditingWidget","JSON","stringify","map","widget","id","type","stpm","state","widgetReducer","dtpm","dispatch","size","text","then","theActualWidget","item","console","log","status","widgetToDelete","widgetToUpdate","theWidgets"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { useParams } from 'react-router-dom'\nimport widgetService from '../../services/widget-service'\nimport HeadingWidget from './heading-widget'\nimport ParagraphWidget from './paragraph-widget'\n\nconst WidgetList = ({\n    deleteWidget,\n    updateWidget,\n    createWidget,\n    findWidgetsForTopic,\n    widgets = [],\n    clearWidget,\n}) => {\n    const { topicId } = useParams()\n    const [editingWidget, setEditingWidget] = useState({})\n    useEffect(() => {\n        if (topicId !== 'undefined' && typeof topicId !== 'undefined') {\n            findWidgetsForTopic(topicId)\n        } else {\n            clearWidget()\n        }\n    }, [topicId])\n\n    return (\n        <div>\n            <i onClick={() => {\n                        createWidget(topicId)\n                    }} className=\"fas fa-plus float-right\"></i>\n            <h4>Widget List </h4>\n            {JSON.stringify(widgets)}\n            <ul className=\"list-group\">\n                {widgets.map((widget) => (\n                    <li className=\"list-group-item\" key={widget.id}>\n                        {/* {editingWidget.id === widget.id && (\n                            <>\n                                <i\n                                    onClick={() => {\n                                        updateWidget(widget.id, editingWidget)\n                                    }}\n                                    className=\"fas fa-check float-right\"\n                                ></i>\n                                <i\n                                    onClick={() => deleteWidget(widget.id)}\n                                    className=\"fas fa-trash float-right\"\n                                ></i>\n                            </>\n                        )}*/}\n                        {editingWidget.id !== widget.id && (\n                            <i\n                                onClick={() => setEditingWidget(widget)}\n                                className=\"fas fa-cog float-right\"\n                            ></i>\n                        )} \n                        {widget.type === 'HEADING' && (\n                            <HeadingWidget\n                                editing={editingWidget.id === widget.id}\n                                widget={widget}\n                                updateWidget = {updateWidget}\n                                deleteWidget = {deleteWidget}\n                            />\n                        )}\n                        {widget.type === 'PARAGRAPH' && (\n                            <ParagraphWidget\n                                editing={editingWidget.id === widget.id}\n                                widget={widget}\n                                updateWidget = {updateWidget}\n                                deleteWidget = {deleteWidget}\n                            />\n                        )}\n                    </li>\n                ))}\n            </ul>\n        </div>\n    )\n}\n\nconst stpm = (state) => {\n    return {\n        widgets: state.widgetReducer.widgets,\n    }\n}\nconst dtpm = (dispatch) => {\n    return {\n        createWidget: (topicId) => {\n            widgetService\n                .createWidget(topicId, {type: \"HEADING\", size: 1, text: \"New Widget\"})\n                .then((theActualWidget) =>\n                    dispatch({\n                        type: 'CREATE_WIDGET',\n                        widget: theActualWidget,\n                    })\n                )\n        },\n        deleteWidget: (item) => {\n            console.log(item.id)\n            widgetService.deleteWidget(item.id).then((status) =>\n                dispatch({\n                    type: 'DELETE_WIDGET',\n                    widgetToDelete: item,\n                })\n            )\n        },\n        updateWidget: (widget) =>\n            widgetService.updateWidget(widget.id, widget).then((status) =>\n                dispatch({\n                    type: 'UPDATE_WIDGET',\n                    widgetToUpdate: widget,\n                })\n            ),\n        findWidgetsForTopic: (topicId) =>\n            widgetService.findWidgetsForTopic(topicId).then((theWidgets) =>\n                dispatch({\n                    type: 'FIND_ALL_WIDGETS_FOR_TOPIC',\n                    widgets: theWidgets,\n                })\n            ),\n        clearWidget: () =>\n            dispatch({\n                type: 'CLEAR_WIDGET',\n                widgets: [],\n            }),\n    }\n}\n\nexport default connect(stpm, dtpm)(WidgetList)\n"]},"metadata":{},"sourceType":"module"}