{"ast":null,"code":"var _jsxFileName = \"/Users/xinyue/Desktop/wbdv-s21-xinyue-dang-client-react/src/components/widgets/widget-list.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport widgetService from '../../services/widget-service';\nimport HeadingWidget from './heading-widget';\nimport ParagraphWidget from './paragraph-widget';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WidgetList = ({\n  deleteWidget,\n  updateWidget,\n  createWidget,\n  findWidgetsForTopic,\n  widgets = [],\n  clearWidget\n}) => {\n  _s();\n\n  const {\n    topicId\n  } = useParams();\n  const [widget, setWidget] = useState({});\n  useEffect(() => {\n    if (topicId !== 'undefined' && typeof topicId !== 'undefined') {\n      findWidgetsForTopic(topicId);\n    } else {\n      clearWidget();\n    }\n  }, [topicId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"i\", {\n      onClick: () => {\n        createWidget(topicId);\n      },\n      className: \"fas fa-plus float-right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Widget List \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group\",\n      children: widgets.map(_widget => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item\",\n        children: [_widget.type === 'HEADING' && /*#__PURE__*/_jsxDEV(HeadingWidget, {\n          targetId: widget,\n          item: _widget,\n          updateWidget: updateWidget,\n          deleteWidget: deleteWidget\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 29\n        }, this), _widget.type === 'PARAGRAPH' && /*#__PURE__*/_jsxDEV(ParagraphWidget, {\n          flag: _widget.id === widget.id,\n          item: _widget,\n          updateWidget: updateWidget,\n          deleteWidget: deleteWidget\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 29\n        }, this)]\n      }, _widget.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WidgetList, \"Kayakz4GxMS7QUywIzy2YoEW+W8=\", false, function () {\n  return [useParams];\n});\n\n_c = WidgetList;\n\nconst stpm = state => {\n  return {\n    widgets: state.widgetReducer.widgets\n  };\n};\n\nconst dtpm = dispatch => {\n  return {\n    createWidget: topicId => {\n      widgetService.createWidget(topicId, {\n        type: 'PARAGRAPH',\n        size: 6,\n        text: 'New Widget'\n      }).then(theActualWidget => dispatch({\n        type: 'CREATE_WIDGET',\n        widget: theActualWidget\n      }));\n    },\n    deleteWidget: item => {\n      widgetService.deleteWidget(item.id).then(status => dispatch({\n        type: 'DELETE_WIDGET',\n        widgetToDelete: item\n      }));\n    },\n    updateWidget: widget => {\n      widgetService.updateWidget(widget).then(status => dispatch({\n        type: 'UPDATE_WIDGET',\n        widgetToUpdate: widget\n      }));\n    },\n    findWidgetsForTopic: topicId => widgetService.findWidgetsForTopic(topicId).then(theWidgets => dispatch({\n      type: 'FIND_ALL_WIDGETS_FOR_TOPIC',\n      widgets: theWidgets\n    })),\n    clearWidget: () => dispatch({\n      type: 'CLEAR_WIDGET',\n      widgets: []\n    })\n  };\n};\n\nexport default connect(stpm, dtpm)(WidgetList);\n\nvar _c;\n\n$RefreshReg$(_c, \"WidgetList\");","map":{"version":3,"sources":["/Users/xinyue/Desktop/wbdv-s21-xinyue-dang-client-react/src/components/widgets/widget-list.js"],"names":["React","useEffect","useState","connect","useParams","widgetService","HeadingWidget","ParagraphWidget","WidgetList","deleteWidget","updateWidget","createWidget","findWidgetsForTopic","widgets","clearWidget","topicId","widget","setWidget","map","_widget","type","id","stpm","state","widgetReducer","dtpm","dispatch","size","text","then","theActualWidget","item","status","widgetToDelete","widgetToUpdate","theWidgets"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { useParams } from 'react-router-dom'\nimport widgetService from '../../services/widget-service'\nimport HeadingWidget from './heading-widget'\nimport ParagraphWidget from './paragraph-widget'\n\nconst WidgetList = ({\n    deleteWidget,\n    updateWidget,\n    createWidget,\n    findWidgetsForTopic,\n    widgets = [],\n    clearWidget,\n}) => {\n    const { topicId } = useParams()\n    const [widget, setWidget] = useState({})\n    useEffect(() => {\n        if (topicId !== 'undefined' && typeof topicId !== 'undefined') {\n            findWidgetsForTopic(topicId)\n        } else {\n            clearWidget()\n        }\n    }, [topicId])\n\n    return (\n        <div>\n            <i\n                onClick={() => {\n                    createWidget(topicId)\n                }}\n                className=\"fas fa-plus float-right\"\n            ></i>\n            <h4>Widget List </h4>\n            <ul className=\"list-group\">\n                {widgets.map((_widget) => (\n                    <li key={_widget.id} className=\"list-group-item\">\n                        {_widget.type === 'HEADING' && (\n                            <HeadingWidget\n                                targetId={widget}\n                                item ={_widget}\n                                updateWidget={updateWidget}\n                                deleteWidget={deleteWidget}\n                            />\n                        )}\n                        {_widget.type === 'PARAGRAPH' && (\n                            <ParagraphWidget\n                                flag={_widget.id === widget.id}\n                                item={_widget}\n                                updateWidget={updateWidget}\n                                deleteWidget={deleteWidget}\n                            />\n                        )}\n                    </li>\n                ))}\n            </ul>\n        </div>\n    )\n}\n\nconst stpm = (state) => {\n    return {\n        widgets: state.widgetReducer.widgets,\n    }\n}\nconst dtpm = (dispatch) => {\n    return {\n        createWidget: (topicId) => {\n            widgetService\n                .createWidget(topicId, {\n                    type: 'PARAGRAPH',\n                    size: 6,\n                    text: 'New Widget',\n                })\n                .then((theActualWidget) =>\n                    dispatch({\n                        type: 'CREATE_WIDGET',\n                        widget: theActualWidget,\n                    })\n                )\n        },\n        deleteWidget: (item) => {\n            widgetService.deleteWidget(item.id).then((status) =>\n                dispatch({\n                    type: 'DELETE_WIDGET',\n                    widgetToDelete: item,\n                })\n            )\n        },\n        \n        updateWidget: (widget) => {\n            widgetService.updateWidget(widget).then((status) =>\n                dispatch({\n                    type: 'UPDATE_WIDGET',\n                    widgetToUpdate: widget,\n                })\n            )\n        },\n\n        findWidgetsForTopic: (topicId) =>\n            widgetService.findWidgetsForTopic(topicId).then((theWidgets) =>\n                dispatch({\n                    type: 'FIND_ALL_WIDGETS_FOR_TOPIC',\n                    widgets: theWidgets,\n                })\n            ),\n        clearWidget: () =>\n            dispatch({\n                type: 'CLEAR_WIDGET',\n                widgets: [],\n            }),\n    }\n}\n\nexport default connect(stpm, dtpm)(WidgetList)\n"]},"metadata":{},"sourceType":"module"}